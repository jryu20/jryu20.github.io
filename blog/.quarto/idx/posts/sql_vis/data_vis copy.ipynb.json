{"title":"Climate Data Visualization","markdown":{"yaml":{"title":"Climate Data Visualization","image":"vis.png","format":{"html":{"toc":true}},"author":"Jun Ryu","date":"2023-01-10","categories":["sqlite","python","visualizations"]},"headingText":"1. Creating a Database","containsRefs":false,"markdown":"\n\n> In this post, we will be working with the data from National Oceanic and Atmospheric Administration (NOAA) to create interesting, interactive geographical visualizations.\n\n---\n\nFirst, we will connect to a database and create three separate tables (named `temperatures`, `countries`, and `stations`). \n\n* The `temperatures` table will contain station ID, year of measurement, month of measurement, and average temperature. \n* The `countries` table will contain country names and their corresponding country codes. \n* The `stations` table will contain station ID, latitude, longitude, elevation, and the name of the station.\n\n# 2. Query Function\n\n---\n\nNow, we will write a query function `query_climate_database()`, which filters and returns a new dataframe based on the user's input. The user will specify the country, starting year, ending year, and the month. Then, the user will receive a new dataframe matching all the inputted information as well as the station name, latitude, longitude, and the average temperature at the station during the specific year and month.\n\nAn example with the function is shown below with the inputs `\"India\"`, `1980`, `2020`, and `1`.\n\n# 3. Geographic Scatter Plots\n---\n\nWe will use the above function to write a new function `temperature_coefficient_plot()`, which will address the question:\n\n> How does the average yearly change in temperature vary within a given country?\n\nThe new function will accept the same four arguments as `query_climate_database()`, but will have an added explicit argument `min_obs`, which will be used to filter out stations that have less years worth of data than this specified number. Also, we will add `**kwargs` for the user to pass onto `px.scatter_mapbox()`, which is what we will use to create the final visualization.\n\nIn order to compute the estimates of yearly increase in temperature, we will use a linear regression model for each station and grab all the corresponding first coefficients.\n\nLet's demonstrate the above function! We will again use the inputs `\"India\"`, `1980`, `2020`, and `1` from Part 2, and add on `10` for the argument `min_obs`. We will also add extra arguments to pass onto `px.scatter_mapbox()`. If everything goes right, the resulting visualization should contain all stations in India with at least 10 years worth of data between the years 1980 and 2020 for the month of January. \n\nThe station data will then be plotted in the form of a scatter plot on a world map. Each data point will contain information about the corresponding station's estimate of yearly temperature increase, which can be explicitly found by hovering over the data point or estimated by looking at its color.\n\nCool! The above gives us a neat visualization created with Plotly Express that answers our central question. Let's try passing on different arguments.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"data_vis copy.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"comments":{"giscus":{"repo":"quarto"}},"title":"Climate Data Visualization","image":"vis.png","author":"Jun Ryu","date":"2023-01-10","categories":["sqlite","python","visualizations"]},"extensions":{"book":{"multiFile":true}}}}}