{"title":"Plotly: Pure Perfection","markdown":{"yaml":{"title":"Plotly: Pure Perfection","image":"https://upload.wikimedia.org/wikipedia/commons/8/8a/Plotly-logo.png","format":{"html":{"toc":true}},"author":"Jun Ryu","date":"2023-01-17","categories":["sqlite","python","visualizations"]},"headingText":"1. Import Data","containsRefs":false,"markdown":"\n\n> What else can [Plotly](https://plotly.com/python/) produce? Today, we continue with the NOAA climate data and explore what other visualizations can be made.\n\n---\n\nThis procedure is the exact same as the last post.\n\n# 2. Maps and More Maps\n\n---\n\nIn the previous post, we mainly worked with [`px.scatter_mapbox`](https://plotly.com/python/scattermapbox/). \n\nLet's see what other maps there are!\n\n### 1. [`px.density_mapbox`](https://plotly.com/python/mapbox-density-heatmaps/): *Mapbox Density Heatmap*\n\n<br>\n\nWoah! The above produces a heatmap comparing the density of stations. The brighter color (like that of the US) represents that there are more stations clustered in that region. We can play around with the various arguments to get different results. \n\nFor example, the following plot will focus on Europe:\n\n<br>\n\n---\n\n### 2. [`px.scatter_geo`](https://plotly.com/python/bubble-maps/): *Bubble Map*\n\nNow, suppose we wanted to know the *exact* number of stations in each country. We first write a simple function to grab the data we need.\n\nNow that we have the data, let's get to plotting our bubble map.\n\nWith the above, we definitely get the information that we wanted, but in terms of visualization, it's not the best. Most bubbles are barely visible due to their small station count. How can we fix this?\n\n---\n\n### 3. [`px.choropleth`](https://plotly.com/python/choropleth-maps/): *Choropleth Map*\n\nWe will essentially run the same code but using `px.choropleth`.\n\n<br>\nSlightly better, but still not great. To fix this issue, we will use one of the most common tricks used in data transformation: taking the logarithm of the response values.\n\nThis is much better. Now that we are working off of an exponential scale, the distinctions are much more clear. To get the station count number, we can simply compute $e^x$, where $x$ is the transformed count for that specific country.\n\n---\n\n### 4. [`ff.create_hexbin_mapbox`](https://plotly.com/python/hexbin-mapbox/): *Hexbin Mapbox*\n\nWe return to our old friend Mapbox, and try to replicate the visualization in Part 1 but with a twist.\n\nThe above is similar to a density heatmap, but it is organized in hexagonal regions. We can play around with the arguments to get a cleaner plot:\n\nNice! The above only shows regions with at least 1 station. Now, suppose a user wanted to know the mean temperature of each region (based on stations that are in that region) for a specific year and month. How could we do that?\n\nWe start with writing a query function `query_region_temp()` that grabs the appropriate data:\n\nWe make sure this query function is correct:\n\nGreat! It seems like the query function is correctly grabbing all temperature data that apply to a specific year and month. All that's left to do is the create the plotting function, `region_avg_plot()`:\n\nLast but not least, let's test this function:\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"plotly.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"title":"Plotly: Pure Perfection","image":"https://upload.wikimedia.org/wikipedia/commons/8/8a/Plotly-logo.png","author":"Jun Ryu","date":"2023-01-17","categories":["sqlite","python","visualizations"]},"extensions":{"book":{"multiFile":true}}}}}