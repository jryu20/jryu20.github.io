{"title":"Fun with Regex","markdown":{"yaml":{"title":"Fun with Regex","author":"Jun Ryu","date":"2023-02-21","format":{"html":{"toc":true}},"categories":["R","python","regex"],"image":"regex3.png","output":"html_document"},"headingText":"1. Using R","containsRefs":false,"markdown":"\n\n> Some simple exercises with [regular expressions](https://en.wikipedia.org/wiki/Regular_expression)...\n\n```{r, include=FALSE}\nlibrary(tidyverse)\nlibrary(dplyr)\n```\n\n\n### names.txt\n\n```{r}\nnames <- unlist(read.table(\"names.txt\", sep = \"\\n\"), use.names = FALSE)\nnames\n```\n\n#### (a)\n\nFind all usernames that contain at least one numeric character.\n\n```{r}\nnames[str_detect(names, \"[0-9]\")]\n```\n\n#### (b)\nFind all usernames that are exactly four characters long and consist only of alphabetic characters.\n\n```{r}\nnames[str_detect(names, \"^[a-zA-Z]{4}$\")]\n```\n\n#### (c)\nFind all usernames following the conventional way of name format, i.e., the “given name” goes first, and the “family” name last, with any other names in-between. The names are separated by a single white space and each name should be uppercase letter followed by one or more lowercase letters.\n\n```{r}\nnames[str_detect(names, \"^(?:[A-Z][a-z]+ )+(?:[A-Z][a-z]+)$\")]\n```\n\n---\n\n### cards.txt\n\n```{r}\ncards <- unlist(read.table(\"cards.txt\", sep = \"\\n\"), use.names = FALSE)\ncards\n```\n\n---\n\n::: {.callout-note}\n- A Master card number begins with a 5 and it is exactly 16 digits long.\n- A Visa card number begins with a 4 and it is between 13 and 16 digits long.\n:::\n\n#### (a)\nWrite a regex pattern to match valid Master card number and print all the valid numbers, grouped into sets of 4 separated by a single space.\n\n```{r}\npat_a <- \"^([5][0-9]{3})\\\\s*([0-9]{4})\\\\s*([0-9]{4})\\\\s*([0-9]{4})$\"\napply(str_match(cards[str_detect(cards, pat_a)], pat_a)[,2:5], 1, paste, collapse = \" \")\n```\n\n#### (b)\nWrite a regex pattern to match valid Visa card number and print all the valid numbers, grouped into sets of 4 separated by a single space.\n\n```{r}\npat_b <- \"^([4][0-9]{3})\\\\s*([0-9]{4})\\\\s*([0-9]{4})\\\\s*([0-9]{1,4})$\"\napply(str_match(cards[str_detect(cards, pat_b)], pat_b)[,2:5], 1, paste, collapse = \" \")\n```\n\n---\n\n### passwords.txt\n\n```{r}\npasswords <- unlist(read.table(\"passwords.txt\", sep = \"\\n\"), use.names = FALSE)\npasswords\n```\n\n#### (a)\nWrite a regex pattern to identify the passwords that satisfies the requirements below.\n\n- Minimum 8 characters\n- Must contain at least one letter\n- Must contain at least one digit\n\n```{r}\npasswords[str_detect(passwords, \"(?=.*[0-9])(?=.*[a-zA-Z]).{8}\")]\n```\n\n#### (b)\nWrite a regex pattern to identify the passwords that satisfies the requirements below.\n\n- Minimum 8 characters\n- Must contain at least one uppercase character\n- Must contain at least one lowercase character\n- Must contain at least one digit\n\n```{r}\npasswords[str_detect(passwords, \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]).{8}\")]\n```\n\n---\n\n### wordlists.RData\n\nWrite regular expression patterns which will match all of the values in x and none of the values in y.\n\n```{r}\nload(\"wordlists.RData\")\n```\n\n#### (a)\n\n![](regex1.png)\n\n```{r}\nall(str_detect(wordlists$Ranges$x, \"^[a-f]+$\")) == TRUE\nany(str_detect(wordlists$Ranges$y, \"^[a-f]+$\")) == FALSE\n```\n\n#### (b)\n\n![](regex2.png)\n\n```{r}\nall(str_detect(wordlists$Backrefs$x, \"([a-z]{3}).*\\\\1\")) == TRUE\nany(str_detect(wordlists$Backrefs$y, \"([a-z]{3}).*\\\\1\")) == FALSE\n```\n\n#### (c)\n\n![](regex3.png)\n\n```{r}\nall(str_detect(wordlists$Prime$x, \"^(?!(xx+)\\\\1+$)\")) == TRUE\nany(str_detect(wordlists$Prime$y, \"^(?!(xx+)\\\\1+$)\")) == FALSE\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","comments":{"giscus":{"repo":"jryu20/quarto"}},"theme":{"light":"flatly","dark":"darkly"},"title-block-banner":true,"title":"Fun with Regex","author":"Jun Ryu","date":"2023-02-21","categories":["R","python","regex"],"image":"regex3.png"},"extensions":{"book":{"multiFile":true}}}}}