{
  "hash": "a2e0056e2ee80f97cac4ed61b130f3e7",
  "result": {
    "markdown": "---\ntitle: \"Palmer Penguins\"\nimage: \"https://upload.wikimedia.org/wikipedia/commons/0/00/Brown_Bluff-2016-Tabarin_Peninsula%E2%80%93Gentoo_penguin_%28Pygoscelis_papua%29_03.jpg\"\nauthor: \"Jun Ryu\"\ndate: \"2022-01-23\"\ncategories: [python, visualizations]\n---\n\n>In this blog post, we will explain how to construct an interesting data visualization of the Palmer Penguins data set.\n\n\n### First, we read the data...\n\n--- \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/PhilChodrow/PIC16B/master/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n```\n:::\n\n\n### Let's see what this data holds!\n---\n\nusing `.head()` will display the first 5 rows of the data frame.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>studyName</th>\n      <th>Sample Number</th>\n      <th>Species</th>\n      <th>Region</th>\n      <th>Island</th>\n      <th>Stage</th>\n      <th>Individual ID</th>\n      <th>Clutch Completion</th>\n      <th>Date Egg</th>\n      <th>Culmen Length (mm)</th>\n      <th>Culmen Depth (mm)</th>\n      <th>Flipper Length (mm)</th>\n      <th>Body Mass (g)</th>\n      <th>Sex</th>\n      <th>Delta 15 N (o/oo)</th>\n      <th>Delta 13 C (o/oo)</th>\n      <th>Comments</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>PAL0708</td>\n      <td>1</td>\n      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n      <td>Anvers</td>\n      <td>Torgersen</td>\n      <td>Adult, 1 Egg Stage</td>\n      <td>N1A1</td>\n      <td>Yes</td>\n      <td>11/11/07</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>MALE</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Not enough blood for isotopes.</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>PAL0708</td>\n      <td>2</td>\n      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n      <td>Anvers</td>\n      <td>Torgersen</td>\n      <td>Adult, 1 Egg Stage</td>\n      <td>N1A2</td>\n      <td>Yes</td>\n      <td>11/11/07</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>FEMALE</td>\n      <td>8.94956</td>\n      <td>-24.69454</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>PAL0708</td>\n      <td>3</td>\n      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n      <td>Anvers</td>\n      <td>Torgersen</td>\n      <td>Adult, 1 Egg Stage</td>\n      <td>N2A1</td>\n      <td>Yes</td>\n      <td>11/16/07</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>FEMALE</td>\n      <td>8.36821</td>\n      <td>-25.33302</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PAL0708</td>\n      <td>4</td>\n      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n      <td>Anvers</td>\n      <td>Torgersen</td>\n      <td>Adult, 1 Egg Stage</td>\n      <td>N2A2</td>\n      <td>Yes</td>\n      <td>11/16/07</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Adult not sampled.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PAL0708</td>\n      <td>5</td>\n      <td>Adelie Penguin (Pygoscelis adeliae)</td>\n      <td>Anvers</td>\n      <td>Torgersen</td>\n      <td>Adult, 1 Egg Stage</td>\n      <td>N3A1</td>\n      <td>Yes</td>\n      <td>11/16/07</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>FEMALE</td>\n      <td>8.76651</td>\n      <td>-25.32426</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n> Now, suppose we wanted to create a plot that shows the distribution of the body mass based on the penguin's species.\n\n\n### We will import the correct packages for plotting...\n---\n\n`matplotlib` is a plotting library and `seaborn` is a data visualization library based on `matplotlib`. the following code is how we import these packages:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt \nimport seaborn as sns\n```\n:::\n\n\n### We first create our empty plot using pyplot...\n\n---\n\nwe use `plt.subplots()` as described here: <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html> <br> <br>\nthe method returns two variables \"figures\" and \"axes\", which we store under `fig` and `ax`, respectively. our first argument for `plt.subplots()` is 1 because we want to create 1 subplot. we also specify the size of our figure using the `figsize` argument: the first number represents how wide and the second number represents how tall the plot will be.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1, figsize = (8,5))\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=655 height=409}\n:::\n:::\n\n\n### Then, we use sns.boxplot() to plot \"body mass\" split along different species...\n---\n\nhere, we call our penguins data using `data = penguins` and we set our x-axis data to draw from the \"Body Mass (g)\" column and y-axis to draw from the \"Species\" column. we will also set `width = 0.5`, which controls the size of the boxes. lastly, we will store this result under `fig`, which we created earlier with matplotlib. <br><br>\n\nfor further documentation: <https://seaborn.pydata.org/generated/seaborn.boxplot.html>\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfig = sns.boxplot(data = penguins, x=\"Body Mass (g)\", y=\"Species\", width=0.5)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=845 height=422}\n:::\n:::\n\n\n### For funsies, we will also produce the strip plot...\n\n---\n\nthe intention of adding a strip plot is to see the spread of the individual data points, thus we utilize `sns.stripplot()`. we use `color = \"black\"` to make the dots black and we set `size = 3` to reduce the size of the dots. <br><br>\n\nfor further documentation: <https://seaborn.pydata.org/generated/seaborn.stripplot.html>\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig = sns.stripplot(data = penguins, x=\"Body Mass (g)\", y=\"Species\", color = \"black\", size = 3)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=845 height=422}\n:::\n:::\n\n\n### Combine the two plots with a title and a figure caption...\n---\n\nnow, for our final step, we combine the previous three code chunks, but we add an extra line using `ax.set_title()` to create a title for our plot. remember that `ax` was formed when we originally created our plot using `matplotlib` and represents our \"axes\".\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1, figsize = (8,5))\nax.set_title(\"Body Mass vs. Species\")\nfig = sns.boxplot(data = penguins, x=\"Body Mass (g)\", y=\"Species\", width=0.5)\nfig = sns.stripplot(data = penguins, x=\"Body Mass (g)\", y=\"Species\", color = \"black\", size = 3)\n```\n\n::: {.cell-output .cell-output-display}\n![Figure 1: Body Mass (g) vs. Penguin Species](index_files/figure-html/cell-8-output-1.png){width=919 height=442}\n:::\n:::\n\n\n### There's our visualization!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}